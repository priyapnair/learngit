ubuntu@ip-172-31-47-7:~$ cat > file1
wish to study more^X
exit

ctrl + D is used to exit 
ubuntu@ip-172-31-47-7:~$ cat > f2 {open f3 in write mode}
second file
ubuntu@ip-172-31-47-7:~$ cat file1 f2 >f3 {file1 and f2 appended redirected to f3}
ubuntu@ip-172-31-47-7:~$ cat f3
wish to study more
exit

second file

ubuntu@ip-172-31-47-7:~$ cat >> f3
appended new contentubuntu@ip-172-31-47-7:~$ cat f3
wish to study more
exit

second file

appended new contentubuntu@ip-172-31-47-7:~$ cat f3 > f4{copy from one file to another}
ubuntu@ip-172-31-47-7:~$ cat f4
wish to study more
exit

second file
appended new contentubuntu@ip-172-31-47-7:~$ cat f4
wish to study more
exit

second file
To reverse the data of the file (tac)
tac file1

appended new contentubuntu@ip-172-31-47-7:~$ tac f4
appended new contentsecond file

exit
wish to study more

output redirection

ubuntu@ip-172-31-47-7:~$ cat < f3
wish to study more
exit

second file
appended new contentubuntu@ip-172-31-47-7:~$ cat f4 < f3
wish to study more
exit

second file
appended new contentubuntu@ip-172-31-47-7:~$ cat f4
wish to study more
exit

second file
ubuntu@ip-172-31-47-7:~$ man more | more{q is used to exit from man}{first screen full of cntent displayed}
who am i
ubuntu@ip-172-31-47-7:~$
ubuntu@ip-172-31-47-7:~$ who am i
ubuntu   pts/0        2021-06-01 16:17 (116.68.104.238)

dell@Priya MINGW64 /d/devops/learngit (master)
ubuntu@ip-172-31-47-7:~$ ls s*.doc
ls: cannot access 's*.doc': No such file or directory
ubuntu@ip-172-31-47-7:~$ ls
 f2   f3   f4   file1   filea   pp   sk  'skes^x  oyes'
FOREGROUND AND BACKGROUND PROCESS

ubuntu@ip-172-31-47-7:~$ ls f*
f2  f3  f4  file1  filea
ubuntu@ip-172-31-47-7:~$ ls f* &
[1] 46266
ubuntu@ip-172-31-47-7:~$ f2  f3  f4  file1  filea
ls
 f2   f3   f4   file1   filea   pp   sk  'skes^x  oyes'
[1]+  Done                    ls --color=auto f*

ubuntu@ip-172-31-47-7:~$ ps
    PID TTY          TIME CMD
  46360 pts/2    00:00:00 bash
  46371 pts/2    00:00:00 ps
ubuntu@ip-172-31-47-7:~$
ubuntu@ip-172-31-47-7:~$ ^C
ubuntu@ip-172-31-47-7:~$ ps
    PID TTY          TIME CMD
  46360 pts/2    00:00:00 bash
  46376 pts/2    00:00:00 ps
KILL COMMAND KILL BACKGROUND PROCESS
ubuntu@ip-172-31-47-7:~$ kill 46376
-bash: kill: (46376) - No such process
ubuntu@ip-172-31-47-7:~$ kill 46376
-bash: kill: (46376) - No such process
ubuntu@ip-172-31-47-7:~$ kill
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
PROCESS STATUS WITH PPID
ubuntu@ip-172-31-47-7:~$ ps -f
UID          PID    PPID  C STIME TTY          TIME CMD
ubuntu     46360   46359  0 14:45 pts/2    00:00:00 -bash
ubuntu     46380   46360  0 14:52 pts/2    00:00:00 ps -f
ubuntu@ip-172-31-47-7:~$ top
top - 14:56:22 up 4 days, 23:15,  3 users,  load average: 0.00, 0.00, 0.00
Tasks:  99 total,   1 running,  98 sl
Changing Ownership
The chown command changes the ownership of a file. The basic syntax is as follows −

$ chown user filelist
The value of the user can be either the name of a user on the system or the user id (uid) of a user on the system.

The following example will help you understand the concept −

$ chown amrood testfile
$
Changes the owner of the given file to the user amrood.

NOTE − The super user, root, has the unrestricted capability to change the ownership of any file but normal users can change the ownership of only those files that they own.

Changing Group Ownership
The chgrp command changes the group ownership of a file. The basic syntax is as follows −

$ chgrp group filelist
The value of group can be the name of a group on the system or the group ID (GID) of a group on the system.

Following example helps you understand the concept −

$ chgrp special testfile
$
Changes the group of the given file to special group
ubuntu@ip-172-31-47-7:~$ chgrp ubuntu pp

which command gives path of exe commands

ubuntu@ip-172-31-47-7:~$ which ls
/usr/bin/ls

Which command with multiple arguments
ubuntu@ip-172-31-47-7:~$ which ls cat
/usr/bin/ls
/usr/bin/cat
info command is same as man
info ls
ubuntu@ip-172-31-47-7:~$ info ls
ubuntu@ip-172-31-47-7:~$
ubuntu@ip-172-31-47-7:~$ info ls
ubuntu@ip-172-31-47-7:~$
Linux head command
The 'head' command displays the starting content of a file. By default, it displays starting 10 lines of any file.

Syntax:

head <file name>  
ubuntu@ip-172-31-47-7:~$ head f2
sdcsdcsdcsdc
dcsdfsdf


fss

sdfsdf



ubuntu@ip-172-31-47-7:~$ head -2 f2
sdcsdcsdcsdc
dcsdfsdf
Head command for multiple files
If we'll write two file names then it will display first ten lines (in this case file has five lines only) of each file separated by a heading.

Syntax:

head <file name> <file name>
ubuntu@ip-172-31-47-7:~$ head f2 f3
==> f2 <==
sdcsdcsdcsdc
dcsdfsdf


fss

sdfsdf




==> f3 <==
wish to study more
exit

second file
Linux tail command
Linux tail command is used to display the last ten lines of one or more files. Its main purpose is to read the error message. 

Syntax:
tail <file name> 
ubuntu@ip-172-31-47-7:~$ tail -3 f3

second file
appended new contentubuntu@ip-172-31-47-7:~$ tail -1 f3
appended new contentubuntu@ip-172-31-47-7:~$ tail f3
wish to study more
exit

second file
Tail with other commands
The tail command can be used with other commands. It can be piped to other commands to filter the output. Consider the below command:

ls -t /etc | tail -n 6 
appended new contentubuntu@ip-172-31-47-7:~$ tail -1 f3
appended new contentubuntu@ip-172-31-47-7:~$ tail f3
wish to study more
exit

second file
appended new contentubuntu@ip-172-31-47-7:~$ tail -f f3
wish to study more
exit

second file
appended new content

display line numbers 
tubuntu@ip-172-31-47-7:~$ cat -n f3
     1  wish to study more
     2  exit
     3
     4  second file
     5  appended new contentubuntu@ip-172-31-47-7:~$
ubuntu@ip-172-31-47-7:~$ cat -b f3
     1  wish to study more
     2  exit

     3  second file
     4  appended new content

ubuntu@ip-172-31-47-7:~$ cat -b f3
     1  wish to study more
     2  exit

     3  second file
     4  appended new content
ubuntu@ip-172-31-47-7:~$ cat -e f3
wish to study more^X$
exit$
$
second file$
We can get back to our home directory by executing the cd command without any argument. It will back to our home directory from any directory we are working on. Execute it as follows:

cd  
Consider the below output:

Linux Home Directory



9) Change to Directory having Spaces
To change the directory that has spaces in its name, surround the path with quotes (' ') or use the backslash (\) character with it. Execute the command as follows:

cd 'Dir name with space'  [doubt]
cd Dir\ name\ with\ space  
The above commands will ignore the space from the directory name. Consider the below output:

CD Command

Linux Path Completion
Path completion is a very helpful feature in any operating system. It is made to speed up your typing speed. You just have to hit 'Tab' key and your command, option or file name that is arguments will be automatically completed or will give you the options.

For example, if you want to type 'cd Desktop' you can type 'cd De' and hit Tab. Your commnd will be automatically completed.

But to work Tb key you have to type first letter correctly. For example, if you will type 'cd de' followed by Tab key then you won't get any result as there wil be no files starting from 'de' . 

ubuntu@ip-172-31-47-7:~/pp/subpp$ ls -lh{size in kb }
total 16K
drwxrwxr-x 2 ubuntu ubuntu 4.0K Jun  7 14:51 data
drwxrwxr-x 2 ubuntu ubuntu 4.0K Jun  7 14:47 fold
drwxrwxr-x 2 ubuntu ubuntu 4.0K Jun  7 14:51 mine
drwxrwxr-x 2 ubuntu ubuntu 4.0K Jun  7 14:47 new
ubuntu@ip-172-31-47-7:~/pp/subpp$ ls -lhS
total 16K
drwxrwxr-x 2 ubuntu ubuntu 4.0K Jun  7 14:51 data
drwxrwxr-x 2 ubuntu ubuntu 4.0K Jun  7 14:47 fold
drwxrwxr-x 2 ubuntu ubuntu 4.0K Jun  7 14:51 mine
drwxrwxr-x 2 ubuntu ubuntu 4.0K Jun  7 14:47 new
ubuntu@ip-172-31-47-7:~/pp/subpp$ ls -l{size in bytes}
total 16
drwxrwxr-x 2 ubuntu ubuntu 4096 Jun  7 14:51 data
drwxrwxr-x 2 ubuntu ubuntu 4096 Jun  7 14:47 fold
drwxrwxr-x 2 ubuntu ubuntu 4096 Jun  7 14:51 mine
drwxrwxr-x 2 ubuntu ubuntu 4096 Jun  7 14:47 new
ubuntu@ip-172-31-47-7:~/pp$ ls -d */{list only subdirectories}
d1/  d2/  parentpp/  pp/  subpp/
ubuntu@ip-172-31-47-7:~/pp$
ubuntu@ip-172-31-47-7:~$ ls -R{SHOWS DETAILS OF SUBDIRECTORIES}
.:
 f2   f3   f4   file1   filea   mm   myfirst   pf1   pf2   pf3   pp   sk  'skes^x  oyes'

./pp:
d1  d2  demch  firsttxteso  parentpp  pp  subpp

./pp/d1:

./pp/d2:

./pp/parentpp:

./pp/pp:
m1

./pp/pp/m1:
m2

./pp/pp/m1/m2:

./pp/subpp:
data  fold  mine  new

./pp/subpp/data:

./pp/subpp/fold:

./pp/subpp/mine:
rmdir -p
This command will delete a directory including its sub-directories all at once. In below picture, all sub-directories have been deleted with 'rmdir -p' command.


ubuntu@ip-172-31-47-7:~/pp$ rmdir -p pp/{delet only if dir is empty}
rmdir: failed to remove 'pp/': Directory not empty
ubuntu@ip-172-31-47-7:~/pp$ rmdir  pp/
rmdir: failed to remove 'pp/': Directory not empty
ubuntu@ip-172-31-47-7:~/pp$ rmdir subpp
rmdir: failed to remove 'subpp': Directory not empty
ubuntu@ip-172-31-47-7:~/pp$
clear is used to clear the terminal

Using Space As Delimiter
If we want to use space as a delimiter, then we have to quote the space (' ') with the cut command. To cut the output by using space as delimiter, execute the command as follows:

cut -d ' ' -f(columnNumber) <fileName>    
Consider the following commands:

cut -d ' ' -f2 exm.txt  
cut -d ' ' -f5 exm.txt  

ubuntu@ip-172-31-47-7:~/pp$ cut -d ' ' -f2 firsttxteso{-d is delimiter '' indicates space as delimiter
file
ubuntu@ip-172-31-47-7:~/pp$
grep options
grep -vM: The 'grep -v' command displays lines not matching to the specified word.
Syntax:

grep -v <searchWord> <fileName>  
Example:

grep -v 9 marks.txt  

grep -i: The 'grep -i' command filters output in a case-insensitive way.
Syntax:

grep -i <searchWord> <fileName>  
Example:

grep -i red exm.txt  













